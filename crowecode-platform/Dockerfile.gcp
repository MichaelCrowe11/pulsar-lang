# Multi-stage Dockerfile optimized for Google Cloud Platform
# Includes Vertex AI support and GCP-specific optimizations

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci --only=production && \
    npm install -g prisma && \
    npx prisma generate

# Stage 2: Builder
FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set build arguments for GCP
ARG GCP_PROJECT_ID
ARG GCP_LOCATION=us-central1
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build the application
RUN npm run build

# Stage 3: Runner
FROM node:20-alpine AS runner
WORKDIR /app

# Install required packages for GCP
RUN apk add --no-cache \
    libc6-compat \
    ca-certificates \
    curl \
    && addgroup --system --gid 1001 nodejs \
    && adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/prisma ./prisma

# Copy GCP service account key mount point
RUN mkdir -p /secrets && chown nextjs:nodejs /secrets

# Set environment variables for GCP
ENV NODE_ENV=production
ENV PORT=8080
ENV HOSTNAME="0.0.0.0"

# Google Cloud specific optimizations
ENV GOOGLE_APPLICATION_CREDENTIALS=/secrets/vertex-ai-key.json
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Health check for Cloud Run
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Switch to non-root user
USER nextjs

# Expose port (Cloud Run uses 8080 by default)
EXPOSE 8080

# Start the application
CMD ["node", "server.js"]
